generator client {
  provider = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["public", "auth"]
}

model AuthUser {
  id String @id @db.Uuid

  userProfile UserProfile?
  accounts    Account[]
  plans       Plan[]
  posts       Post[]
  media       Media[]

  @@schema("auth")
  @@map("users")
}

enum Platform {
  FACEBOOK  @map("facebook")
  INSTAGRAM @map("instagram")
  TELEGRAM  @map("telegram")
}

enum PostStatus {
  DRAFT     @map("draft")
  SCHEDULED @map("scheduled")
  PUBLISHED @map("published")
  ERROR     @map("error")
}

model UserProfile {
  id        BigInt   @id @default(autoincrement())
  userId    String   @unique @db.Uuid
  name      String
  avatarUrl String?  @map("avatar_url")
  createdAt DateTime @default(now()) @map("created_at")

  user AuthUser @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@schema("public")
  @@map("user_profiles")
}

model Account {
  id          BigInt    @id @default(autoincrement())
  userId      String    @db.Uuid
  platform    Platform
  accessToken String    @map("access_token")
  refreshToken String?  @map("refresh_token")
  username    String?
  profileUrl  String?   @map("profile_url")
  createdAt   DateTime  @default(now()) @map("created_at")

  user  AuthUser @relation(fields: [userId], references: [id], onDelete: Cascade)
  posts Post[]

  @@index([userId])
  @@schema("public")
  @@map("accounts")
}

model Plan {
  id        BigInt   @id @default(autoincrement())
  userId    String   @db.Uuid
  name      String
  startDate DateTime @db.Date @map("start_date")
  endDate   DateTime @db.Date @map("end_date")
  createdAt DateTime @default(now()) @map("created_at")

  user  AuthUser @relation(fields: [userId], references: [id], onDelete: Cascade)
  posts Post[]

  @@index([userId])
  @@schema("public")
  @@map("plans")
}

model Post {
  id          BigInt     @id @default(autoincrement())
  planId      BigInt?    @map("plan_id")
  userId      String     @db.Uuid @map("user_id")
  accountId   BigInt?    @map("account_id")
  platform    Platform
  scheduledAt DateTime   @map("scheduled_at")
  publishedAt DateTime?  @map("published_at")
  status      PostStatus
  content     String
  mediaUrl    String?    @map("media_url")
  errorMessage String?   @map("error_message")
  createdAt   DateTime   @default(now()) @map("created_at")

  user    AuthUser @relation(fields: [userId], references: [id], onDelete: Cascade)
  plan    Plan?    @relation(fields: [planId], references: [id], onDelete: Cascade)
  account Account? @relation(fields: [accountId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([accountId])
  @@index([planId])
  @@schema("public")
  @@map("posts")
}

model Media {
  id        BigInt   @id @default(autoincrement())
  userId    String   @db.Uuid @map("user_id")
  fileUrl   String   @map("file_url")
  fileType  String   @map("file_type")
  createdAt DateTime @default(now()) @map("created_at")

  user AuthUser @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@schema("public")
  @@map("media")
}
